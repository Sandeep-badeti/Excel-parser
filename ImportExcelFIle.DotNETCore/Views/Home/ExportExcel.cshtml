@{ ViewData["Title"] = "Privacy Policy"; }
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>


<!DOCTYPE html>

<html ng-app="sjs">

<head>
    <title>Excel data extractor</title>
    <!-- Angular -->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>

    <!-- bootstrap -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"
          integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
            integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"
            integrity="sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd"
            crossorigin="anonymous"></script>

    <!-- SheetJS js-xlsx library -->
    <!-- <script src="shim.js"></script> -->
    @*<script src="xlsx.full.min.js"></script>*@
    <script src="~/js/xlsx.full.min.js"></script>
</head>

<body>
    <div class="jumbotron" style="min-height: 100vh;">
        <div class="container text-center" ng-controller="sheetjs">
            <h1>Excel parser for Data Upload</h1>
            <p>Convert your FedEx zone pdf to excel and upload below without making any changes</p>
            <!-- <button id="exportbtn">Export Table</button> -->
            <!-- <input type="file" import-sheet-js="" multiple="false" /> -->
            <div class="row">
                <div class="col-md-8 col-md-offset-2">
                    <form class="form-horizontal">
                        <div class="form-group" ng-class="{'has-error': submitted && !data.length}">
                            <label for="">Converted Excel file</label>
                            <input type="file" class="form-control" import-sheet-js="" opts="data" count="total_count"
                                   multiple="true" />
                        </div>
                        <div class="form-group" ng-class="{'has-error': submitted && !endpointapi.length}">
                            <label for="">API endpoint to post data</label>
                            <input type="text" class="form-control" placeholder="http://localhost:5000/api-to-post-data"
                                   ng-model="endpointapi" />
                            <!-- multiple="false"  -->
                        </div>
                        <p ng-if="submitted && !endpointapi.length" class="bg-danger text-danger">Enter api endpoint</p>
                        <p ng-if="submitted && !data.length" class="bg-danger text-danger">Choose your excel file </p>
                        <button class="btn btn-lg btn-success" id="postDataToAPI" ng-click="postDataToAPI()">
                            Post Data
                            to API
                        </button>
                    </form>
                </div>
            </div>
            <!-- keeping counts -->
            <div class="row" style="margin-top:10px" ng-if="data.length">
                <div class="col-md-4 btn bg-primary">
                    <div class="btn btn-lg">
                        Total {{total_count}}
                    </div>
                </div>
                <div class="col-md-4 btn bg-success text-success">
                    <div class="btn btn-lg">
                        Uploaded {{success}}
                    </div>
                </div>
                <div class="col-md-4 btn bg-danger text-danger">
                    <div class="btn btn-lg">
                        Failed {{failed}}
                    </div>
                </div>
            </div>
            <!-- data rows -->
            <div class="row">
                <div class="col-md-8 col-md-offset-2">
                    <table class="table table-striped" id="sjs-table" ng-if="data.length">
                        <thead>
                            <tr>
                                <th class="text-center">Origin Cluster</th>
                                <th class="text-center">Start Zip</th>
                                <th class="text-center">End Zip</th>
                                <th class="text-center">Zone</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="row in data">
                                <td>{{row.originClusterStartZip}} - {{row.originClusterEndZip}}</td>
                                <td>{{row.startZip}}</td>
                                <td>{{row.endZip}}</td>
                                <td>{{row.zone}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
    <script>
        function SheetJSImportDirective() {
            return {
                scope: { opts: '=', count: '=' },
                link: function ($scope, $elm) {
                    $elm.on('change', function (changeEvent) {
                        //objs
                        for (let i = 0; i < changeEvent.target.files.length; ++i) {
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                /* update scope */
                                $scope.$apply(function () {
                                    $scope.opts = extractData(e.target.result, changeEvent.target.files[i].name.split(".")[0]);
                                    $scope.count = $scope.opts.length;
                                });
                            };
                            reader.readAsBinaryString(changeEvent.target.files[i]);
                        };
                    });
                }
            };
        }

        function extractData(bstr, fromCluster) {
            /* read workbook */
            var wb = XLSX.read(bstr, { type: 'binary' });

            /* grab 3rd sheet */
            var wsname = wb.SheetNames[2];
            var ws = wb.Sheets[wsname];

            var aoa = XLSX.utils.sheet_to_json(ws, { header: 1, raw: false });

            var data = [];
            let origin = fromCluster.split("-");
            var originClusterStartZip = origin[0];
            var originClusterEndZip = origin[1];
            //adjust for file names with only one zip
            if (!originClusterEndZip)
                originClusterEndZip = originClusterStartZip;
            //loop through each row
            for (let r = 2; r < aoa.length; ++r) {
                let row = aoa[r];
                //loop through each col of row
                for (let c = 0; c < row.length; ++c) {
                    if (c % 2 == 0) {
                        //handle for double values in row - also handle whitespaces in between the ranges
                        console.log(']' + row[c] + '[');
                        console.log(']' + row[c + 1] + '[');

                        let allranges = row[c].trim().replace("\n", "&");
                        let allzones = row[c + 1].trim().replace("\n", "&");
                        console.log(allranges);
                        console.log(allzones);
                        if (allranges.indexOf("&") == -1) allranges = allranges.replace(" ", "&");
                        if (allzones.indexOf("&") == -1) allzones = allzones.replace(" ", "&");
                        console.log(allranges);
                        console.log(allzones);
                        allranges = allranges.split(/&/);
                        allzones = allzones.split(/&/);

                        console.log(allranges);
                        console.log(allzones);
                        for (let i = 0; i < allranges.length; ++i) {
                            data.push(parseDataIntoRanges(allranges[i].replace("/\s/g", ""), allzones[i].replace("/\s/g", ""), originClusterStartZip, originClusterEndZip));
                        }
                    }
                }
            }
            return data.sort(compare);
        }

        function parseDataIntoRanges(range, zone, originStart, originEnd) {
            ranges = range.split("-");
            let startzip = (ranges[0]) ? ranges[0].replace(/\D/g, "") : null;
            let endzip = (ranges[1]) ? ranges[1].replace(/\D/g, "") : null;
            if (!endzip)
                endzip = startzip;
            // console.log(startzip, endzip, zone);
            return { originClusterStartZip: originStart, originClusterEndZip: originEnd, startZip: `${startzip}00`, endZip: `${endzip}99`, zone: zone };
        }

        function compare(a, b) {
            if (Number(a.startZip) < Number(b.startZip)) {
                return -1;
            }
            if (Number(a.startZip) > Number(b.startZip)) {
                return 1;
            }
            return 0;
        }
    </script>
    <script>
        var app = angular.module('sjs', []);
        app.controller('sheetjs', function ($scope, $http) {
            $scope.data = [];
            $scope.endpointapi = 'http://localhost:60957/Home/ImportData';
            $scope.submitted = false;
            $scope.total_count = 0;
            $scope.success = 0;
            $scope.failed = 0;

            $scope.postDataToAPI = function () {
                $scope.submitted = true;
                if (!$scope.endpointapi.length)
                    return;
                console.log('data export', $scope.endpointapi);
                $scope.data.forEach(d => {
                    $http({
                        method: 'POST',
                        url: $scope.endpointapi,
                        data: d
                        // headers: {
                        //     'Content-Type': 'application/json'
                        // },
                    }).then(
                        function (res) {
                            console.log(res);
                            ++$scope.success;
                        }
                        , function (err) {
                            console.log(err);
                            ++$scope.failed;
                        }
                    );
                });
            };

            $scope.setData = (d) => {
                alert('data received');
                console.log(d);
            }
        });
        //import directive
        app.directive("importSheetJs", [SheetJSImportDirective]);

    </script>

</body>

</html>
